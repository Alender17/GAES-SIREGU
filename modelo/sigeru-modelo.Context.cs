//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GAES_SIREGU.modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBSIGERUEntities1 : DbContext
    {
        public DBSIGERUEntities1()
            : base("name=DBSIGERUEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<alertas> alertas { get; set; }
        public virtual DbSet<alertasVehiculos> alertasVehiculos { get; set; }
        public virtual DbSet<clientes> clientes { get; set; }
        public virtual DbSet<entregas> entregas { get; set; }
        public virtual DbSet<mantenimientos> mantenimientos { get; set; }
        public virtual DbSet<rutas> rutas { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tipoEmpleado> tipoEmpleado { get; set; }
        public virtual DbSet<tipoMantenimiento> tipoMantenimiento { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
        public virtual DbSet<vehiculos> vehiculos { get; set; }
        public virtual DbSet<camioneros> camioneros { get; set; }
    
        public virtual int EditarCorreo(string usuario, string contraActual, string correoNuevo)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraActualParameter = contraActual != null ?
                new ObjectParameter("contraActual", contraActual) :
                new ObjectParameter("contraActual", typeof(string));
    
            var correoNuevoParameter = correoNuevo != null ?
                new ObjectParameter("correoNuevo", correoNuevo) :
                new ObjectParameter("correoNuevo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarCorreo", usuarioParameter, contraActualParameter, correoNuevoParameter);
        }
    
        public virtual int EditarDatosUsu(string usuario, string contraAnterior, string contraNueva)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contraAnteriorParameter = contraAnterior != null ?
                new ObjectParameter("contraAnterior", contraAnterior) :
                new ObjectParameter("contraAnterior", typeof(string));
    
            var contraNuevaParameter = contraNueva != null ?
                new ObjectParameter("contraNueva", contraNueva) :
                new ObjectParameter("contraNueva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarDatosUsu", usuarioParameter, contraAnteriorParameter, contraNuevaParameter);
        }
    
        public virtual int EditarVehiculo(string matricula, Nullable<int> modelo, Nullable<int> motor, string imagen, string marca, Nullable<System.DateTime> soat, Nullable<System.DateTime> tecno)
        {
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var modeloParameter = modelo.HasValue ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(int));
    
            var motorParameter = motor.HasValue ?
                new ObjectParameter("motor", motor) :
                new ObjectParameter("motor", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(string));
    
            var soatParameter = soat.HasValue ?
                new ObjectParameter("soat", soat) :
                new ObjectParameter("soat", typeof(System.DateTime));
    
            var tecnoParameter = tecno.HasValue ?
                new ObjectParameter("tecno", tecno) :
                new ObjectParameter("tecno", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarVehiculo", matriculaParameter, modeloParameter, motorParameter, imagenParameter, marcaParameter, soatParameter, tecnoParameter);
        }
    
        public virtual int EliminarVehiculo(string matricula)
        {
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarVehiculo", matriculaParameter);
        }
    
        public virtual int InsertarRuta(string descripcion, Nullable<int> kilometraje)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var kilometrajeParameter = kilometraje.HasValue ?
                new ObjectParameter("kilometraje", kilometraje) :
                new ObjectParameter("kilometraje", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarRuta", descripcionParameter, kilometrajeParameter);
        }
    
        public virtual int InsertarVehiculo(string matricula, Nullable<int> motor, Nullable<int> modelo, string imagen, string marca, Nullable<System.DateTime> soat, Nullable<System.DateTime> tecno)
        {
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var motorParameter = motor.HasValue ?
                new ObjectParameter("motor", motor) :
                new ObjectParameter("motor", typeof(int));
    
            var modeloParameter = modelo.HasValue ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(string));
    
            var soatParameter = soat.HasValue ?
                new ObjectParameter("soat", soat) :
                new ObjectParameter("soat", typeof(System.DateTime));
    
            var tecnoParameter = tecno.HasValue ?
                new ObjectParameter("tecno", tecno) :
                new ObjectParameter("tecno", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarVehiculo", matriculaParameter, motorParameter, modeloParameter, imagenParameter, marcaParameter, soatParameter, tecnoParameter);
        }
    
        public virtual int RestablecerContra(string usuario, string correo, string contraSHA)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var contraSHAParameter = contraSHA != null ?
                new ObjectParameter("contraSHA", contraSHA) :
                new ObjectParameter("contraSHA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestablecerContra", usuarioParameter, correoParameter, contraSHAParameter);
        }
    
        public virtual int sp_add_tipomantenimiento(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_add_tipomantenimiento", descripcionParameter);
        }
    
        public virtual int SP_AddCliente(string nit, string nombre, string direccion, string telefono, Nullable<int> id_ruta)
        {
            var nitParameter = nit != null ?
                new ObjectParameter("nit", nit) :
                new ObjectParameter("nit", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var id_rutaParameter = id_ruta.HasValue ?
                new ObjectParameter("id_ruta", id_ruta) :
                new ObjectParameter("id_ruta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddCliente", nitParameter, nombreParameter, direccionParameter, telefonoParameter, id_rutaParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_RemCliente(string nit)
        {
            var nitParameter = nit != null ?
                new ObjectParameter("nit", nit) :
                new ObjectParameter("nit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RemCliente", nitParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_Upd_tipomantenimiento(string descripcion, Nullable<int> id)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Upd_tipomantenimiento", descripcionParameter, idParameter);
        }
    
        public virtual int SP_UpdCliente(string nit, string nombre, string direccion, string telefono, Nullable<int> id_ruta)
        {
            var nitParameter = nit != null ?
                new ObjectParameter("nit", nit) :
                new ObjectParameter("nit", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var id_rutaParameter = id_ruta.HasValue ?
                new ObjectParameter("id_ruta", id_ruta) :
                new ObjectParameter("id_ruta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdCliente", nitParameter, nombreParameter, direccionParameter, telefonoParameter, id_rutaParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_add_empleado(Nullable<int> cedula, string nombre, string direccion, string imagen, string correo, string telefono, string tipo_sangre, Nullable<int> id_tipoempleado, string matricula, Nullable<bool> estado)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var tipo_sangreParameter = tipo_sangre != null ?
                new ObjectParameter("tipo_sangre", tipo_sangre) :
                new ObjectParameter("tipo_sangre", typeof(string));
    
            var id_tipoempleadoParameter = id_tipoempleado.HasValue ?
                new ObjectParameter("id_tipoempleado", id_tipoempleado) :
                new ObjectParameter("id_tipoempleado", typeof(int));
    
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_add_empleado", cedulaParameter, nombreParameter, direccionParameter, imagenParameter, correoParameter, telefonoParameter, tipo_sangreParameter, id_tipoempleadoParameter, matriculaParameter, estadoParameter);
        }
    
        public virtual int sp_delete_empleados(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_empleados", cedulaParameter);
        }
    
        public virtual int sp_editar_empleado(Nullable<int> cedula, string nombre, string direccion, string imagen, string correo, string telefono, string tipo_sangre, Nullable<int> id_tipoempleado, string matricula, Nullable<bool> estado)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var tipo_sangreParameter = tipo_sangre != null ?
                new ObjectParameter("tipo_sangre", tipo_sangre) :
                new ObjectParameter("tipo_sangre", typeof(string));
    
            var id_tipoempleadoParameter = id_tipoempleado.HasValue ?
                new ObjectParameter("id_tipoempleado", id_tipoempleado) :
                new ObjectParameter("id_tipoempleado", typeof(int));
    
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_editar_empleado", cedulaParameter, nombreParameter, direccionParameter, imagenParameter, correoParameter, telefonoParameter, tipo_sangreParameter, id_tipoempleadoParameter, matriculaParameter, estadoParameter);
        }
    
        public virtual int sp_addempleado(Nullable<int> cedula, string nombre, string direccion, string imagen, string correo, string telefono, string tipo_sangre, Nullable<int> id_tipoempleado, string matricula, Nullable<int> estado)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var tipo_sangreParameter = tipo_sangre != null ?
                new ObjectParameter("tipo_sangre", tipo_sangre) :
                new ObjectParameter("tipo_sangre", typeof(string));
    
            var id_tipoempleadoParameter = id_tipoempleado.HasValue ?
                new ObjectParameter("id_tipoempleado", id_tipoempleado) :
                new ObjectParameter("id_tipoempleado", typeof(int));
    
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_addempleado", cedulaParameter, nombreParameter, direccionParameter, imagenParameter, correoParameter, telefonoParameter, tipo_sangreParameter, id_tipoempleadoParameter, matriculaParameter, estadoParameter);
        }
    
        public virtual int sp_deleteempleados(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteempleados", cedulaParameter);
        }
    
        public virtual int sp_editarempleado(Nullable<int> cedula, string nombre, string direccion, string imagen, string correo, string telefono, string tipo_sangre, Nullable<int> id_tipoempleado, string matricula, Nullable<int> estado)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var tipo_sangreParameter = tipo_sangre != null ?
                new ObjectParameter("tipo_sangre", tipo_sangre) :
                new ObjectParameter("tipo_sangre", typeof(string));
    
            var id_tipoempleadoParameter = id_tipoempleado.HasValue ?
                new ObjectParameter("id_tipoempleado", id_tipoempleado) :
                new ObjectParameter("id_tipoempleado", typeof(int));
    
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_editarempleado", cedulaParameter, nombreParameter, direccionParameter, imagenParameter, correoParameter, telefonoParameter, tipo_sangreParameter, id_tipoempleadoParameter, matriculaParameter, estadoParameter);
        }
    
        public virtual int InsertarEntrega(Nullable<System.DateTime> fecha, Nullable<int> id_ruta, Nullable<int> kilometraje, string matricula, Nullable<int> cedula_auxiliar, Nullable<int> cedula_vendedor)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var id_rutaParameter = id_ruta.HasValue ?
                new ObjectParameter("id_ruta", id_ruta) :
                new ObjectParameter("id_ruta", typeof(int));
    
            var kilometrajeParameter = kilometraje.HasValue ?
                new ObjectParameter("kilometraje", kilometraje) :
                new ObjectParameter("kilometraje", typeof(int));
    
            var matriculaParameter = matricula != null ?
                new ObjectParameter("matricula", matricula) :
                new ObjectParameter("matricula", typeof(string));
    
            var cedula_auxiliarParameter = cedula_auxiliar.HasValue ?
                new ObjectParameter("cedula_auxiliar", cedula_auxiliar) :
                new ObjectParameter("cedula_auxiliar", typeof(int));
    
            var cedula_vendedorParameter = cedula_vendedor.HasValue ?
                new ObjectParameter("cedula_vendedor", cedula_vendedor) :
                new ObjectParameter("cedula_vendedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEntrega", fechaParameter, id_rutaParameter, kilometrajeParameter, matriculaParameter, cedula_auxiliarParameter, cedula_vendedorParameter);
        }
    }
}
